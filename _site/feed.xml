<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Tecourt</title>
    <description>Keep it simple, no-nonsense.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 07 Aug 2016 03:23:48 +0200</pubDate>
    <lastBuildDate>Sun, 07 Aug 2016 03:23:48 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Y U NO USE UML</title>
        <description>&lt;p&gt;While a picture is worth a thousands words, a good diagram is better than :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a couple hour-long meetings&lt;/li&gt;
  &lt;li&gt;six e-mails&lt;/li&gt;
  &lt;li&gt;a 2MB PDF no developer will ever open&lt;/li&gt;
  &lt;li&gt;the three above together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After pulling my hair speaking with product managers about interpretations we couldn’t agree on,&lt;br /&gt;
after endless arguments with architects about what the clean design should have/could have been,&lt;br /&gt;
after talking for too long about the pros and cons of solutions that would never work,&lt;br /&gt;
I’ve found out that it’s much more productive to starting scribbling on the white board instead of debating through the air.&lt;/p&gt;

&lt;p&gt;Most programmers agree, but the problem is that we have that tendency to re-invent the wheel when it comes to sketching what we have in mind.&lt;br /&gt;
Having worked recently on authentication and authorization projects on a fairly large system, I encountered a LOT of unique pieces of office art over the past few months. 
The enterprise world is full of unexpected creativity.&lt;/p&gt;

&lt;h2 id=&quot;weve-all-been-there&quot;&gt;We’ve all been there&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hey there’s that large process involving a handful of components with complex interactions, 
let me draw five boxes and link them up as ideas come out of my mind !&lt;br /&gt;
And now that the thing has become a spaghetti ball nobody can understand, I’ll add numbers on top of the arrows, 
and each number will have a legend with large paragraphs I’ll put in a word file !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Optional :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vivid colors for extra-level of confusion&lt;/li&gt;
  &lt;li&gt;Servers depicted as 1985 computers, globe icon representing the outside world, various shapes of clouds&lt;/li&gt;
  &lt;li&gt;All arrows pointing both ways, killing any chance of finding a starting point amid the chaos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No kidding, the diagram below was like the 3rd result when I googled “Software Architecture Diagram”.&lt;br /&gt;
Despite its simplicity, it is already an effort to figure out what the arrows mean :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.slidesharecdn.com/diagramming-140128130130-phpapp01/95/a-software-architects-view-on-diagramming-9-638.jpg?cb=1396270322&quot; alt=&quot;Live Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be fair, the target audience of this diagram is probably not programmers, 
maybe managers who want to get an idea of what happens under the hood.&lt;br /&gt;
The problem is, people use this kind of diagram as technical documentation / blueprints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/y-u-no-use-uml.jpg&quot; alt=&quot;y-u-no-use-uml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately you can’t put everything on the same diagram and expect it to be clear.&lt;br /&gt;
We rarely pull out a diagram for something too trivial, 
and good diagrams follow the same rules as good object design : separation of concerns.&lt;br /&gt;
Sorry, you will probably have to draw 2 or 3 different diagrams to represent each aspect of a complex feature.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Modeling_Language&quot;&gt;Wikipedia&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Structure diagrams emphasize the things that must be present in the system being modeled.&lt;br /&gt;
Since structure diagrams represent the structure, they are used extensively in documenting 
the software architecture of software systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behavior diagrams emphasize what must happen in the system being modeled. 
Since behavior diagrams illustrate the behavior of a system, 
they are used extensively to describe the functionality of software systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the sake of our minds, &lt;strong&gt;Don’t mix structure and behavior together on one diagram.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In other words :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;don’t mix up the technical and business stuff in one do-it-all scribble&lt;/li&gt;
  &lt;li&gt;don’t try to describe &lt;em&gt;what&lt;/em&gt; you do and &lt;em&gt;how&lt;/em&gt; on the same picture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m no UML purist to be honest (do they still exist ?), I don’t think you should &lt;em&gt;always&lt;/em&gt; hit your modeling tool, 
or sharpen your pencil, before coding.&lt;br /&gt;
Heck, I just draw diagrams when words fail, and it’s far from perfect.&lt;/p&gt;

&lt;p&gt;Here are the ones I often use, depending on what I want to express.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note : This is based on my very practical and personal enterprise experience.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;UML experts / college teachers would probably lapidate me on sight for my many imprecisions.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;useful-uml-diagrams&quot;&gt;Useful UML diagrams&lt;/h2&gt;

&lt;h3 id=&quot;sequence-diagram-behavior&quot;&gt;Sequence Diagram (behavior)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt; :  &lt;em&gt;I want to visualize the chain of interactions between actors during a process&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sequence-diagram.png&quot; alt=&quot;Sequence Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the one you want to bring for that long meeting with other teams about how you’ll implement the latest fancy Single Sign-On protocol.&lt;br /&gt;
It can of course document any kind of interactions between applications, components, classes or whatever you want.
If I had to keep only one type of diagram it would be this one.&lt;br /&gt;
It literally saved me days of :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;explaining which actor does what&lt;/li&gt;
  &lt;li&gt;arguing on solutions that suck : a sequence diagram visually reveals the complexity of bad solutions&lt;/li&gt;
  &lt;li&gt;arguing on interpretation : no room for doubt when each call is written along with its parameters&lt;/li&gt;
  &lt;li&gt;most importantly, starting a development that would prove to be impossible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me emphasize this last point : when done with care, a Sequence Diagram can point out any missing element in a complex process before you start coding.&lt;br /&gt;
The logic of the process will be described step by step, forcing your consciousness into every detail :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;For this call, where do we find this parameter ? it has not been provided&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;How can the client track the order if we didn’t send him the generated ID ?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;This flow is plain impossible, it would force us to send a password cleartext&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;We need to make three server calls here, we can save round trips by storing some data the first time&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t like uncompromising rules, but I wouldn’t start implementing something complex involving 
third-parties before agreeing on a precise Sequence Diagram first.&lt;/p&gt;

&lt;h3 id=&quot;component-diagram-structure&quot;&gt;Component Diagram (structure)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt; : &lt;em&gt;I have a bunch of components and I want to picture them with their dependencies.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This diagram depicts what are the components of a given system and how they are linked through their interfaces.&lt;/p&gt;

&lt;h4 id=&quot;application-scope-probably-not-the-right-way-to-call-that&quot;&gt;Application Scope (probably not the right way to call that)&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/internal-component-diagram.png&quot; alt=&quot;Component Diagram&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Who care about lollipops and interfaces ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While looking at an application’s internals, component diagrams are cool for design discussions early on, 
as you can shape up the main modules and dispatch each component to different developers.&lt;/p&gt;

&lt;p&gt;Component diagrams can be much more precise than just dependencies, by picturing which interfaces are shared with whom.&lt;br /&gt;
I’ve tried a couple times, and it gets too fuzzy in my opinion.&lt;/p&gt;

&lt;h4 id=&quot;system-scope-probably-not-the-right-name-either&quot;&gt;System scope (probably not the right name either)&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/system-component-diagram.png&quot; alt=&quot;Deployment Component Diagram&quot; /&gt;
&lt;em&gt;Notice how the cool looking component icon is pointless here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the system level, I like to use component diagrams to display application/resources dependencies.&lt;br /&gt;
To be honest, it’s kind of a mix between a simplistic Component and &lt;strong&gt;Deployment Diagram&lt;/strong&gt; (machines are just physical components anyway).
In a microservice architecture, where every functionality is potentially broken down into multiple HTTP applications, 
having a representation of the big picture is really helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whatever the scope is, just don’t try to describe a business process on top of a component/deployment diagram !&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;activity-diagram-behavior&quot;&gt;Activity Diagram (behavior)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt; : &lt;em&gt;I want to zoom in on this complex process and figure out all the possible scenarios&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/activity-diagram.png&quot; alt=&quot;Activity Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t often get to draw activity diagrams, but I when I do, 
it’s probably because I’m trying to make some sense out of a poorly described business process.&lt;/p&gt;

&lt;p&gt;Good news, regular humans can read it without help. Better, business guys can draft it themselves.&lt;/p&gt;

&lt;h3 id=&quot;class-diagram-structure&quot;&gt;Class Diagram (structure)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt; : &lt;em&gt;I still think object oriented programming should rule the world and 
I want to impress people with the dozen design patterns I shoe-horned in my new library.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/class-diagram.png&quot; alt=&quot;Class Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or more seriously, if you’re working with peers on the same codebase and you want to agree on fine grain design, 
class diagrams offer a nice way to get started on a white board.&lt;br /&gt;
I usually throw these diagrams away at the end of a short design meeting or when done implementing, 
as IDEs do a better job than us at reverse engineering them from the code.&lt;/p&gt;

&lt;h2 id=&quot;the-rest&quot;&gt;The rest&lt;/h2&gt;

&lt;p&gt;That’s only my opinion, but I find the other diagrams overkill.&lt;br /&gt;
Thanks to &lt;a href=&quot;http://creately.com/blog/diagrams/uml-diagram-types-examples&quot;&gt;this site&lt;/a&gt;, here is a list I couldn’t have remembered on my own :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Case diagrams : I find Use Case Diagrams more confusing than text. 
Actors, features and roles can easily be broken down in tables and bullet points. 
Also, the principal stage for this diagram is early product design, 
and business guys don’t buy into abstract techie methodology pushed down their throats (me neither).&lt;/li&gt;
  &lt;li&gt;State diagrams : Similar to activity diagrams that I prefer.&lt;/li&gt;
  &lt;li&gt;Package diagrams : I find the code self explanatory in most cases, which awfully sounds like lazyness.&lt;/li&gt;
  &lt;li&gt;Communication diagrams : the exact same can be produced with a sequence diagram, in a much clearer fashion.&lt;/li&gt;
  &lt;li&gt;Timing diagrams : aren’t diagrams supposed to make things easier to understand ?!&lt;/li&gt;
  &lt;li&gt;Profile diagrams, composite structure diagrams, interaction overview diagrams, object diagrams : seriously, who has the time for this stuff in a real world project ?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tooling&quot;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;Finding the right tool for the job has been a pain : UML modelers are either expensive, not portable, plain crap, or all three.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://draw.io&quot;&gt;https://draw.io&lt;/a&gt;, a free web-based diagram editor, is pretty much everything 
I’ve been expected and then some (it helped me design my kitchen too).&lt;br /&gt;
The UI is smooth, you find everything you want right away. Lightweight and effective.&lt;br /&gt;
You can export the diagram image with XML source embedded – check out with the diagrams above.&lt;br /&gt;
Unfortunately, drawings are cool the first time around but they are a burden to maintain, 
and the XML representation cannot be reasonably manipulated by hand.&lt;/p&gt;

&lt;p&gt;Although &lt;a href=&quot;http://plantuml.com&quot;&gt;PlantUML&lt;/a&gt; is old, don’t let the website scare you away, 
it’s still the best solution around, especially its integration with &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor-maven-examples/tree/master/asciidoctor-diagram-example&quot;&gt;AsciiDoctor through a maven plugin&lt;/a&gt;
(thanks to &lt;a href=&quot;http://jroller.com/aalmiray/&quot;&gt;Andres Almiray&lt;/a&gt; for the great talk at Voxxed Days Berlin 2016).
Writing diagrams using text is clearly the most maintainable approach.&lt;br /&gt;
The bad : diagrams look like their website, and compiling them to images require the native Graphviz/dot library installed on your machine.
It will be great once they finally rewrite dot in some portable language, which looks like a &lt;a href=&quot;http://fr.plantuml.com/smetana01.html&quot;&gt;daunting task&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or if you’re in the mood, you can generate diagrams from ascii art using &lt;a href=&quot;http://ditaa.sourceforge.net/&quot;&gt;Ditaa&lt;/a&gt;.&lt;br /&gt;
Unproductive but funny. Integration with AsciiDoctor is available too.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you feel like drawing is more efficient than words when it comes to documenting software, 
let’s try to do it in a way most of us can understand right away.&lt;br /&gt;
The UML guys had the diagram thing covered for two decades. If UML is overkill, simplify the syntax of a diagram type without losing sight of the key information you want to share.&lt;/p&gt;

&lt;p&gt;And if you should only remember one thing out of this : &lt;strong&gt;Don’t mix structure and behavior together on one diagram.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Aug 2016 02:00:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/08/06/y-u-no-use-uml.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/08/06/y-u-no-use-uml.html</guid>
        
        
      </item>
    
      <item>
        <title>Service Discovery and the forgotten URNs</title>
        <description>&lt;p&gt;I like using Spring Boot / Cloud a lot. I won’t dig too much into it, it’s &lt;a href=&quot;http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016-trends&quot;&gt;2016&lt;/a&gt; 
and unless you’ve been living under a rock, it has become everything we all expected from Java EE for the last dozen years.&lt;/p&gt;

&lt;p&gt;Anyway, I’m currently working on adding service discovery to my customer’s bunch of micro-services, 
and the &lt;a href=&quot;http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#_service_discovery_eureka_clients&quot;&gt;Eureka&lt;/a&gt; / &lt;a href=&quot;http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#spring-cloud-feign&quot;&gt;Feign&lt;/a&gt; integration is great.&lt;br /&gt;
For a while I was wondering why the Spring team did not implement “HTTP Repositories” in &lt;a href=&quot;http://projects.spring.io/spring-data/&quot;&gt;spring-data&lt;/a&gt;, 
but I guess they prefered working with Feign instead of reiventing the wheel.&lt;/p&gt;

&lt;p&gt;My only grief would be a meaningless implementation detail, in the way that the service name/url is implemented :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a service name must be provided for each client interface. By default, Eureka transparently provides the corresponding URL(s) associated with that service name&lt;/li&gt;
  &lt;li&gt;you can override the service discovery by providing directly the service URL (useful for testing)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are two separate fields on the &lt;code class=&quot;highlighter-rouge&quot;&gt;@FeignClient&lt;/code&gt; annotation :&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/** 
      * In this case, Feign will use directly the URL 
      * instead of resolving the service named &quot;myservice&quot; with Eureka 
      */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;myservice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://myservice.api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyServiceClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Either a name or an address ? sounds familiar ?&lt;/p&gt;

&lt;h2 id=&quot;uri--urn-or-url&quot;&gt;URI = URN or URL&lt;/h2&gt;

&lt;p&gt;A name or an address, that’s exactly what a &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Relationship_between_URIs.2C_URLs.2C_and_URNs&quot;&gt;URI&lt;/a&gt; is :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator&quot;&gt;URL&lt;/a&gt; : Location (address)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Name&quot;&gt;URN&lt;/a&gt; : Name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And how to use a URN ? with some kind of resolver, where Eureka fits the bill as a &lt;a href=&quot;http://stackoverflow.com/questions/5476121/using-dns-as-a-urn-resolver&quot;&gt;non-standard&lt;/a&gt; implementation :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A URN resolver is responsible for initiating and sequencing the queries that 
ultimately lead to a full resolution (translation) of a URN name or a “resolution request”, 
e.g., a request for translation of a URN name into a URL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nothing here forbids some client side load-balancing : 1 URN -&amp;gt; different URLs&lt;/p&gt;

&lt;p&gt;This could have been the day when everybody stopped googling “&lt;em&gt;what’s the difference between URI and URL&lt;/em&gt;”, 
because nobody remembers what an abstract concept is before seeing a live example.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/** Use the service name with a URN. Yup, it&#39;s a valid URI. */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;urn:my-enterprise:myservice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyServiceDiscoveryClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/** Use the service location with a URL. Still a valid URI. */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://myservice.api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDumbClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Poor URNs that never really worked out. It would have been cool to give new life to that unpopular internet standard.&lt;br /&gt;
The only time I saw URNs in action was when putting together &lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&quot;&gt;SAML&lt;/a&gt; single sign-on : few success outside the overly complicated, XML-driven enterprise world.&lt;br /&gt;
Some governments agencies use URNs as unique identifiers, not very popular outside.&lt;/p&gt;

&lt;p&gt;URNs and service discovery/client side load balancing made a lot of sense to me.&lt;br /&gt;
A lot more sense than &lt;a href=&quot;https://spring.io/guides/gs/rest-hateoas/&quot;&gt;inserting links that clients can’t browse in API responses&lt;/a&gt; (which most believe to be HATEOAS) : 
a waste of time when doing RPC over HTTP (which most believe to be REST)… but I’ll leave that for another blog post.&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jul 2016 02:00:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/07/16/service-discovery-and-the-forgotten-urn.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/07/16/service-discovery-and-the-forgotten-urn.html</guid>
        
        
      </item>
    
      <item>
        <title>Overcoming Procrastination</title>
        <description>&lt;p&gt;For a while I’ve been telling myself I &lt;em&gt;should&lt;/em&gt; start writing what’s on my mind about coding, 
and (american) football, and whatever.&lt;/p&gt;

&lt;p&gt;Like anything you tell yourself that you &lt;em&gt;should&lt;/em&gt; do… well you save it for later.&lt;br /&gt;
One of my arguments against my own motivation was that I had too many stuff on my mind, 
and finding where to start is already too much of a challenge for today.&lt;/p&gt;

&lt;p&gt;Because life is full of irony, I’ve been bragging for the last few years that I had developed 
a technique to overcome procrastination (sounds a lot like a motivational speaker, which I’m definitely not).&lt;br /&gt;
Isn’t it the perfect subject to start a blog I’ve kicked aside for a year ?&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-cause&quot;&gt;Understanding the cause&lt;/h2&gt;

&lt;p&gt;Procrastination is not really a thing, just like laziness.&lt;br /&gt;
Both are just words that put a judgement on symptoms, “not doing something”, instead of understanding &lt;em&gt;why&lt;/em&gt; you “don’t do it”.&lt;br /&gt;
In my case, I found out that I had lofty expectations for the stuff I was procrastinating about.&lt;br /&gt;
I want that thing done so perfectly it becomes a daunting task, I’m overwhelmed.&lt;br /&gt;
The exact thought that flashes through my head when I give up on a task is in fact : &lt;em&gt;This is too much for today&lt;/em&gt;.&lt;br /&gt;
I can’t speak for everyone, but procrastination doesn’t come when I don’t care, 
it often comes when I ask myself too much at once. 
Speaking in terms of “deadly sins”, the cause of procrastination would not be laziness, it would be vanity.&lt;/p&gt;

&lt;h2 id=&quot;the-solution--lowering-the-bar&quot;&gt;The solution : lowering the bar&lt;/h2&gt;

&lt;p&gt;Trying to “kick my own butt” brought poor results.&lt;/p&gt;

&lt;p&gt;One thing that has worked so far is &lt;em&gt;lowering the bar&lt;/em&gt; : all you need is too break down your huge task into something smaller.&lt;br /&gt;
Leave your pride aside, you won’t do it well at first. Winning ugly is better than not showing up for the game.&lt;br /&gt;
The most important thing is to get &lt;em&gt;something&lt;/em&gt; done, event something that may seem insignificant.&lt;br /&gt;
In fact, that &lt;em&gt;something&lt;/em&gt; can be as small as the bare minimum you can do before the sun sets :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you have to write a letter to appeal a parking ticket (never happened to me), 
just set your objective for today as low as “pulling a sheet of paper and writing my name on it”.  Just that. Once you’ve done it, you can go to sleep.&lt;/li&gt;
  &lt;li&gt;if you have to write up an essay, just ask yourself to create a blank Word file, and save it with a decent file name. Just that. Once you’ve done it, you can go to sleep.&lt;/li&gt;
  &lt;li&gt;if you have to clean up your windows, just ask yourself to clean one window pane in your room. Just that. Once you’ve done it, you can go to sleep.&lt;/li&gt;
  &lt;li&gt;if you have to fix some old code at work, just ask yourself to get &lt;em&gt;one line&lt;/em&gt; fixed before lunch. Just that. Once you’ve done it, you can go to lunch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me two things can happen :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get so pumped up that I actually got &lt;em&gt;something&lt;/em&gt; started that I finish it all at once&lt;/li&gt;
  &lt;li&gt;I’m actually really tired / have something else to do, 
but my brain remembers that I actually started something, 
and the next morning it’s naturally on my mind when I wake up. Since I already started, there is no “entry ticket” anymore, I can get going fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is nothing new to software developers working in &lt;a href=&quot;https://en.wikipedia.org/wiki/Agile_software_development&quot;&gt;agile&lt;/a&gt; environments.&lt;br /&gt;
When you break down a big task into small pieces, each small success fuels your hunger for more success.&lt;/p&gt;

&lt;p&gt;Like in most things in life, all you need is to make that one tiny little step, and put all your heart into it. Momentum does the rest.&lt;br /&gt;
My father used to tell me that there is a lot more difference between zero and one, than between one and a million, 
because you can multiply zero with everything you want it’s still 0 (yup, he is the motivational speaker of the family).&lt;/p&gt;

&lt;p&gt;Personal stuff aside, here it is, I got started with my tiny little step, my low hanging fruit, the easiest blog post I could figure out.&lt;/p&gt;

&lt;p&gt;See ? Now that I have it all figured out with majestuous modesty, I &lt;em&gt;should&lt;/em&gt; proceed to write something highly impressive… but it would be too much for today :)&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jul 2016 02:00:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/07/14/overcoming-procrastination.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/07/14/overcoming-procrastination.html</guid>
        
        
      </item>
    
      <item>
        <title>Mobile apps madness</title>
        <description>&lt;p&gt;I often hear colleagues and family speak about how big bad internet companies collect their data.&lt;/p&gt;

&lt;p&gt;Yet, I find it highly confusing that these same persons are the ones who blindly give permissions to mobile apps.&lt;/p&gt;

&lt;p&gt;Let’s answer the following questions together :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Would you install an application to access your bank accounts on your desktop/laptop computer, instead of using your browser ?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Would you give it full access over your files and hardware, for features that will &lt;strong&gt;never&lt;/strong&gt; work offline anyway ?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even if &lt;strong&gt;all&lt;/strong&gt; these features can already be accessed from a website…&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;in a device-friendly user interface ?&lt;/li&gt;
      &lt;li&gt;without giving up any access to your private data ?&lt;/li&gt;
      &lt;li&gt;without taking overpriced diskspace on your overpriced iPhone ?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-phrase-this-another-way--are-you-nuts-&quot;&gt;Let’s phrase this another way : Are you nuts ?!&lt;/h2&gt;

&lt;p&gt;Why bring all that nonsense to your mobile phone, which is just a small touch-based computer loaded with private data ? &lt;br /&gt;
Does that cool looking icon in the app store really makes you lose your mind ?&lt;/p&gt;

&lt;h3 id=&quot;but-typing-addresses-is-boring&quot;&gt;&lt;em&gt;“But typing addresses is boring”&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Just put the mobile site in your favorites, and &lt;a href=&quot;http://www.cnet.com/how-to/adding-one-touch-bookmarks-to-your-androids-home-screen/&quot;&gt;add a shortcut icon to your homescreen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, do not install an application unless it provides irreplaceable offline features.&lt;/p&gt;

&lt;p&gt;Such features may be :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;using a GPS for navigation - NOT localization, ordering your cab can be achieved through a browser !&lt;/li&gt;
  &lt;li&gt;stuff with advanced graphics : games, sketching, video editing…&lt;/li&gt;
  &lt;li&gt;stuff to read offline : books, courses, music/video apps with offline mode…&lt;/li&gt;
  &lt;li&gt;professional tooling : payment, docs, spreadsheets…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exception to the offline rule is when you need to get notified (push) in real time : messaging, traffic alerts…&lt;/p&gt;

&lt;p&gt;What you obviously &lt;strong&gt;don’t&lt;/strong&gt; need to install apps for :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking your bank account -&amp;gt; website !&lt;/li&gt;
  &lt;li&gt;Social networks -&amp;gt; website !&lt;/li&gt;
  &lt;li&gt;Ordering a pizza -&amp;gt; website, or *shocker* : phone !&lt;/li&gt;
  &lt;li&gt;Reading the news -&amp;gt; website or paper !&lt;/li&gt;
  &lt;li&gt;Shop online -&amp;gt; website !!&lt;/li&gt;
  &lt;li&gt;Anything that was only a website before smartphones -&amp;gt; website !!!&lt;/li&gt;
  &lt;li&gt;Any promotional offer that requires you to install an app -&amp;gt; just don’t, unless getting spammed makes you feel special&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re probably screwed when it comes to vendors collecting data directly from our operating systems, 
let’s not shoot ourserlves in the foot by opening more doors than necessary.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Sep 2015 22:00:00 +0200</pubDate>
        <link>http://yourdomain.com/2015/09/25/mobile-apps-madness.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/09/25/mobile-apps-madness.html</guid>
        
        
      </item>
    
      <item>
        <title>First post with Jekyll</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is neat.&lt;/p&gt;

&lt;p&gt;Well that’s all I have to say for my first post.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Sep 2015 00:56:00 +0200</pubDate>
        <link>http://yourdomain.com/2015/09/22/first-one.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/09/22/first-one.html</guid>
        
        
      </item>
    
  </channel>
</rss>
